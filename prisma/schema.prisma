// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Gender {
  men
  women
  kid
  unisex
}

//nuevo
enum Role {
  admin
  user
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  //
  Product Product[]
}

model Product {
  id          String   @id @default(uuid())
  title       String
  description String
  inStock     Int
  price       Float    @default(0)
  sizes       Size[]   @default([])
  slug        String   @unique
  tags        String[] @default([])
  gender      Gender

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  ProductImage ProductImage[]

  orderItem orderItem[]

  @@index([gender])
}

model ProductImage {
  id  Int    @id @default(autoincrement())
  url String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          Role      @default(user)
  image         String?

  //realcion 1 a 1
  address UserAddress?

  //realcion con las ordenes
  Order Order[]
}

model country {
  id   String @id
  name String @unique

  UserAddress UserAddress[]

  //realcin con order address
  OrderAddress OrderAddress[]
}

model UserAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  phone      String
  city       String

  //relaciones 
  country   country @relation(fields: [countryId], references: [id])
  countryId String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

//order de compras
model Order {
  id           String    @id @default(uuid())
  subTotal     Float
  tax          Float
  total        Float
  itemsInOrder Float
  isPaid       Boolean   @default(false)
  paidAt       DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relaciones
  user   User   @relation(fields: [userId], references: [id])
  userId String

  orderItem orderItem[]

  //reaalcion de uno
  OrderAddress OrderAddress?

  //para uso de paypal es el id de tercero banco, paypal ,stripe
  //relacion con nuestro tercero
  transactionId String?

}

model orderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float
  size     Size

  //relaciones
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model OrderAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  city       String
  
  phone      String

  //relaciones 
  country country @relation(fields: [countryId], references: [id])
  countryId String

  order Order @relation(fields: [orderId], references: [id])
  orderId String @unique
}
